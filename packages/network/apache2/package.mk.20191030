# SPDX-License-Identifier: GPL-2.0-or-later
# Copyright (C) 2018-present Team LibreELEC (https://libreelec.tv)
# Copyright (C) 2019 EricHao (funhome.tv)

PKG_NAME="apache2"
PKG_VERSION="2.4.41"
PKG_SHA256="133d48298fe5315ae9366a0ec66282fa4040efa5d566174481077ade7d18ea40"
PKG_ARCH="any"
PKG_LICENSE="Apache LICENSE"
PKG_SITE="https://httpd.apache.org"
PKG_URL="http://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-$PKG_VERSION.tar.bz2"
# PKG_MAINTAINER="John Doe" # Full name or forum/GitHub nickname, if you want to be identified as the addon maintainer
PKG_DEPENDS_TARGET="toolchain zlib openssl apr apr-util expat pcre"
#PKG_SECTION="[location under packages, e.g. database]"
PKG_SECTION="web"
PKG_SHORTDESC="[the web server]"
PKG_LONGDESC="[The Number One HTTP Server On The Internet. The Apache HTTP Server Project is an effort to develop and maintain an open-source HTTP server for modern operating systems including UNIX and Windows. The goal of this project is to provide a secure, efficient and extensible server that provides HTTP services in sync with the current HTTP standards.  The Apache HTTP Server (\"httpd\") was launched in 1995 and it has been the most popular web server on the Internet since April 1996. It has celebrated its 20th birthday as a project in February 2015.]"
PKG_TOOLCHAIN="configure"

#PKG_BUILD_FLAGS="-gold"
#PKG_CMAKE_OPTS_TARGET="-DWITH_EXAMPLE_PATH=/storage/.example
#                      "
#$(get_build_dir
H_APR_DIR=$(get_build_dir apr)/.armv7ve-libreelec-linux-gnueabi
H_APU_DIR=$(get_build_dir apr-util)/.armv7ve-libreelec-linux-gnueabi
H_PCRE_DIR=$(get_build_dir pcre)/.install_pkg

#
#remove for a test
#--enable-cache-disk \
#

PKG_CONFIGURE_OPTS_TARGET=" ap_cv_void_ptr_lt_long=no \
 --enable-ssl --enable-so --enable-rewrite \
 --enable-proxy --with-mpm=prefork \
 --with-apr=$H_APR_DIR \
 --with-apr-util=$H_APU_DIR \
 --with-pcre=$H_PCRE_DIR/usr \
 --enable-cache \
 --enable-socache-redis "
#PKG_MAKE_OPTS_TARGET=" -l$TOOLCHAIN/$TARGET_NAME/sysroot/usr/lib/libpcre.so "

pre_configure_target() {


# copy from samba's pre_configure_target
# in order to remove the duplicate of struct iovec
  if [ "$TARGET_ARCH" = "arm" ]; then
  export CFLAGS+=" -DAPR_IOVEC_DEFINED  -lpthread -lpcre  -L$TOOLCHAIN/$TARGET_NAME/sysroot/usr/lib "
  fi


}


#pre_configure_target() {
#PKG_CONFIGURE_OPTS_TARGET="ac_cv_file__dev_zero=yes \
#			  ac_cv_func_setpgrp_void=yes \
#			  apr_cv_tcp_nodelay_with_cork=yes "



pre_make_target() {

echo "should configure OK!!!!!!!!!!!!! ready for make !!!!!!!!!!!!!!!!!!!!!!!"
#remove the following from Makefile
#test_char.h: gen_test_char
#	./gen_test_char > test_char.h
sed -i 's"test_char.h: gen_test_char""' server/Makefile
sed -i 's"./gen_test_char > test_char.h""' server/Makefile
#pc local gen-test-char
#from https://www.cnblogs.com/zhangsf/archive/2013/08/21/3272960.html
#/home/ubuntu/localAPM/apache2/httpd-2.4.41/server/gen_test_char > /xtr/ubuntu/LbrELEC/LibreELEC.tv/build.LibreELEC-RPi2.arm-9.0-devel/apache2-2.4.41/.armv7ve-libreelec-linux-gnueabi/server/test_char.h
cat > server/test_char.h <<EOF
/* this file is automatically generated by gen_test_char, do not edit */
#define T_ESCAPE_SHELL_CMD     (1)
#define T_ESCAPE_PATH_SEGMENT  (2)
#define T_OS_ESCAPE_PATH       (4)
#define T_HTTP_TOKEN_STOP      (8)
#define T_ESCAPE_LOGITEM       (16)
#define T_ESCAPE_FORENSIC      (32)
#define T_ESCAPE_URLENCODED    (64)
#define T_HTTP_CTRLS           (128)
#define T_VCHAR_OBSTEXT        (256)

static const unsigned short test_char_table[256] = {
    0x0a8,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,
    0x0fe,0x07e,0x0ff,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,
    0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,
    0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,0x0fe,
    0x00e,0x140,0x15f,0x146,0x141,0x166,0x141,0x141,
    0x149,0x149,0x101,0x140,0x148,0x100,0x100,0x14a,
    0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,
    0x100,0x100,0x168,0x14b,0x14f,0x148,0x14f,0x14f,
    0x148,0x100,0x100,0x100,0x100,0x100,0x100,0x100,
    0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,
    0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,
    0x100,0x100,0x100,0x14f,0x15f,0x14f,0x147,0x100,
    0x147,0x100,0x100,0x100,0x100,0x100,0x100,0x100,
    0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,
    0x100,0x100,0x100,0x100,0x100,0x100,0x100,0x100,
    0x100,0x100,0x100,0x14f,0x167,0x14f,0x141,0x0fe,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,
    0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e,0x17e
};
EOF





}
post_makeinstall_target() {

cp -P $PKG_REAL_BUILD/.libs/httpd $INSTALL/usr/bin/apache2
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!apache2 is make installed :$INSTALL"

# in order to correct apxs's build path,and preserve the old one as .back and .orig
# in apxs '29th line , "my $installbuilddir = "/usr/build";"
# add the host apache2 install directory to it's path prefix , for php to build with apxs , and apxs get correct config_vars in host
cp -P $INSTALL/usr/bin/apxs $INSTALL/usr/bin/apxs.orig
  APACHE2_DIR=$(get_build_dir apache2)/.install_pkg
cp -P $APACHE2_DIR/usr/bin/apxs $APACHE2_DIR/usr/bin/apxs.orig
#echo $INSTALL>$APACHE2_DIR/usr/bin/h_apache_sed2
#echo "|">$APACHE2_DIR/usr/bin/h_apache_sed3
echo "s|build\";|build\";\$installbuilddir=\"$INSTALL\"+\$installbuilddir;|">$APACHE2_DIR/usr/bin/h_apache_sed
#echo "s|build;|$INSTALL|">$APACHE2_DIR/usr/bin/h_apache_sed
#cat 's|build";|$installbuilddir+=$INSTALL|'>$APACHE2_DIR/usr/bin/hapache-sed1 <EOF
#echo "$APACHE2_DIR/usr/bin/h_apache_sed1 $APACHE2_DIR/usr/bin/h_apache_sed2 $APACHE2_DIR/usr/bin/h_apache_sed3 have a check!!!!"
#cat $APACHE2_DIR/usr/bin/h_apache_sed1 '$installbuilddir+=' $APACHE2_DIR/usr/bin/h_apache_sed2 $APACHE2_DIR/usr/bin/h_apache_sed3 > $APACHE2_DIR/usr/bin/h_apache_sed
#sed -f $APACHE2_DIR/usr/bin/h_apache_sed -iback $APACHE2_DIR/usr/bin/apxs
sed -iback "s|build\";|build\";\$installbuilddir=\"$INSTALL\".\$installbuilddir;|" $APACHE2_DIR/usr/bin/apxs


#sed -i 's|build";|$installbuilddir+=$INSTALL|' $INSTALL/usr/build/config_vars.mk



# corrent config_vars.mk the last several line of APU-CONFIG and APR-CONFIG
cp -P $INSTALL/usr/build/config_vars.mk $INSTALL/usr/build/config_vars.mk.orig

#echo  $INSTALL > $APACHE2_DIR/usr/build/h_configvarsmk_sed2
#echo "|" > $APACHE2_DIR/usr/build/h_configvarsmk_sed3
#echo "s|APR_CONFIG = |APR_CONFIG = " > $APACHE2_DIR/usr/build/h_configvarsmk_sed1
#cat $APACHE2_DIR/usr/build/h_configvarsmk_sed1 $APACHE2_DIR/usr/build/h_configvarsmk_sed2 $APACHE2_DIR/usr/build/h_configvarsmk_sed3> $APACHE2_DIR/usr/build/h_configvarsmk_sed
#sed -i "s|APR_CONFIG = |APR_CONFIG = $INSTALL/|" $APACHE2_DIR/usr/build/config_vars.mk
#$TOOLCHAIN/$TARGET_NAME/sysroot/usr/lib/
sed -iback "s|APR_CONFIG = |APR_CONFIG = $TOOLCHAIN/$TARGET_NAME/sysroot|" $APACHE2_DIR/usr/build/config_vars.mk
# APR OK , now APU
#echo "s|APU_CONFIG = |APU_CONFIG = " > $APACHE2_DIR/usr/build/h_configvarsmk_sed1
#cat $APACHE2_DIR/usr/build/h_configvarsmk_sed1 $APACHE2_DIR/usr/build/h_configvarsmk_sed2 $APACHE2_DIR/usr/build/h_configvarsmk_sed3> $APACHE2_DIR/usr/build/h_configvarsmk_sed
sed -ibackr "s|APU_CONFIG = |APU_CONFIG = $TOOLCHAIN/$TARGET_NAME/sysroot|" $APACHE2_DIR/usr/build/config_vars.mk

ls -l $APACHE2_DIR/usr/build/config_vars.mk
#replace all the " usr/" with $SYSROOT_PREFIX/usr/ within config_vars.mk 
sed -i.pfx "s# usr/# $SYSROOT_PREFIX/usr/#g" $APACHE2_DIR/usr/build/config_vars.mk
ls -l $APACHE2_DIR/usr/build/config_vars.mk
echo "#############################################################have a check config_vars.mk #####"

#copy the fixed config_vars.mk to sysroot
#backup first 
cp $SYSROOT_PREFIX/usr/build/config_vars.mk $SYSROOT_PREFIX/usr/build/config_vars.mk.orig
cp $APACHE2_DIR/usr/build/config_vars.mk $SYSROOT_PREFIX/usr/build

# and copy apxs to sysroot
cp $APACHE2_DIR/usr/bin/apxs $SYSROOT_PREFIX/usr/bin

mkdir -p $SYSROOT_PREFIX/usr/lib/systemd/system
cp -v $PKG_DIR/system.d/apache2.service $SYSROOT_PREFIX/usr/lib/systemd/system
mkdir -p $INSTALL/usr/lib/systemd/system
cp -v $PKG_DIR/system.d/apache2.service $INSTALL/usr/lib/systemd/system
# enable the service
echo " enable apache2.service"
enable_service apache2.service

#add user
    echo "add_user daemon"
    add_group daemon 65532
    add_user daemon x 65532 65532 "apache2" "/" "/bin/sh"

#remove the mod_disk_cache.so #####need to fixit , because it should be fine to work
#sed -i.hfx "s|^LoadModule cache_disk_module lib/mod_cache_disk.so|#LoadModule cache_disk_module lib/mod_cache_disk.so|" $SYSROOT_PREFIX/etc/httpd.conf

#make directory for    SSLCertificateFile      /storage/.kodi/apache/etc/ssl/certs/ssl-cert-snakeoil.pem
#    SSLCertificateKeyFile /storage/.kodi/apache/etc/ssl/private/ssl-cert-snakeoil.key
# we cannot directly put files in /storage/.kodi/apache/etc/ssl/{cert|private} , so we just put /etc/apache/etc/ssl/{cert|private} , and copy it to there when system startup
mkdir -p $INSTALL/etc/apache/etc/ssl/certs
mkdir -p $INSTALL/etc/apache/etc/ssl/private
echo "cp -Pv $PKG_DIR/certs/fullchain.cer  $INSTALL/etc/apache/etc/ssl/certs/ssl-cert-snakeoil.pem"
cp -Pv $PKG_DIR/certs/fullchain.cer  $INSTALL/etc/apache/etc/ssl/certs/ssl-cert-snakeoil.pem
echo "cp -Pv $PKG_DIR/certs/b.funhome.tv.key  $INSTALL/etc/apache/etc/ssl/private/ssl-cert-snakeoil.key"
cp -Pv $PKG_DIR/certs/b.funhome.tv.key  $INSTALL/etc/apache/etc/ssl/private/ssl-cert-snakeoil.key
chmod 600 $INSTALL/etc/apache/etc/ssl/private/ssl-cert-snakeoil.key

#emit a installscript for system startup to copy SSLCertifateFile to /storage/.kodi/apache/etc/ssl/{certs|private}
cat >$INSTALL/usr/bin/apachecertcp.sh <<EOFCERT
#!/bin/bash
mkdir -p /storage/.kodi/apache/etc/ssl/certs
mkdir -p /storage/.kodi/apache/etc/ssl/private
cp -P /etc/apache/etc/ssl/certs/ssl-cert-snakeoil.pem  /storage/.kodi/apache/etc/ssl/certs/ssl-cert-snakeoil.pem
cp -P /etc/apache/etc/ssl/private/ssl-cert-snakeoil.key  /storage/.kodi/apache/etc/ssl/private/ssl-cert-snakeoil.key
chmod 600 /storage/.kodi/apache/etc/ssl/private/ssl-cert-snakeoil.key

#and haoyq we should make dir /var/logs and /var/log/apache2
mkdir -p /var/logs
mkdir -p /var/log/apache2

EOFCERT

chmod 755 $INSTALL/usr/bin/apachecertcp.sh

#cp -Pv $INSTALL/etc/ssl/private/ssl-cert-snakeoil.key  $INSTALL/storage/.kodi/apache/etc/ssl/private/ssl-cert-snakeoil.key

}
